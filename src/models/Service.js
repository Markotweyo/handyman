/**
 * Service Model Schema Definition
 * 
 * This is a reference model for documentation purposes.
 * Supabase doesn't use traditional ODM/ORM models like Mongoose or Sequelize,
 * but this file serves as documentation for the expected structure of services.
 * 
 * Table Name: services
 */

/**
 * Service Schema
 * {
 *   id: UUID (primary key, auto-generated by Supabase)
 *   name: String (required, the name of the service)
 *   description: String (required, detailed description of the service)
 *   price: Decimal (required, the cost of the service)
 *   category: String (optional, the category the service belongs to)
 *   provider_id: UUID (required, foreign key to the users table - the service provider)
 *   is_available: Boolean (default: true, whether the service is currently available)
 *   location: String (optional, where the service is provided)
 *   images: Array (optional, URLs to service images)
 *   rating: Decimal (optional, average rating from 1-5)
 *   created_at: Timestamp (auto-generated by Supabase)
 *   updated_at: Timestamp (auto-generated by Supabase)
 * }
 */

/**
 * SQL for creating the service table in Supabase:
 * 
 * CREATE TABLE services (
 *   id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
 *   name TEXT NOT NULL,
 *   description TEXT NOT NULL,
 *   price DECIMAL(10,2) NOT NULL,
 *   category TEXT,
 *   provider_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
 *   is_available BOOLEAN DEFAULT TRUE,
 *   location TEXT,
 *   images TEXT[],
 *   rating DECIMAL(3,2),
 *   created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
 *   updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
 * );
 * 
 * -- Enable RLS (Row Level Security)
 * ALTER TABLE services ENABLE ROW LEVEL SECURITY;
 * 
 * -- Create policies for access control
 * CREATE POLICY "Public services are viewable by everyone" 
 * ON services FOR SELECT USING (true);
 * 
 * CREATE POLICY "Users can create their own services" 
 * ON services FOR INSERT WITH CHECK (auth.uid() = provider_id);
 * 
 * CREATE POLICY "Users can update their own services" 
 * ON services FOR UPDATE USING (auth.uid() = provider_id);
 * 
 * CREATE POLICY "Users can delete their own services" 
 * ON services FOR DELETE USING (auth.uid() = provider_id);
 */

// Validation functions for Service properties
const validateService = (serviceData) => {
  const errors = [];

  if (!serviceData.name) {
    errors.push('Service name is required');
  }

  if (!serviceData.description) {
    errors.push('Service description is required');
  }

  if (!serviceData.price || isNaN(parseFloat(serviceData.price))) {
    errors.push('Service price is required and must be a number');
  } else if (parseFloat(serviceData.price) <= 0) {
    errors.push('Service price must be greater than 0');
  }

  return {
    isValid: errors.length === 0,
    errors
  };
};

module.exports = {
  validateService
};
